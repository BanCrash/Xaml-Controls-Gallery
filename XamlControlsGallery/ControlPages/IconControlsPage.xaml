<Page
    x:Class="AppUIBasics.ControlPages.IconControlsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:animatedvisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
    xmlns:local="using:AppUIBasics"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
    <StackPanel>
        <local:ControlExample x:Name="Example1" HeaderText="A BitmapIcon with a monochorome bitmap image">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock TextWrapping="WrapWholeWords">
                       To use a BitmapIcon as the icon for a control, you specify the URI of an image file. The file that you use should be a solid image on a transparent background.<LineBreak></LineBreak>
                    </TextBlock>
                    <BitmapIcon x:Name="SliceIcon" UriSource="ms-appx:///Assets/Slices2.png" Width="50" HorizontalAlignment="Left"/>
                </StackPanel>
            </local:ControlExample.Example>
            <local:ControlExample.Xaml>
                <x:String>
                    &lt;BitmapIcon x:Name="SliceIcon" UriSource="ms-appx:///Assets/Slices2.png" Width="50"/&gt;
                </x:String>
            </local:ControlExample.Xaml>
        </local:ControlExample>
         <local:ControlExample x:Name="Example2" HeaderText="A BitmapIcon with a multicolor bitmap image">
            <local:ControlExample.Example>
                <StackPanel>
                <TextBlock TextWrapping="WrapWholeWords">
                       The ShowAsMonochrome property (true by default) will result in a solid block of the foreground color if the property is set to true and the icon is more than one color. This behavior can be ignored by setting the ShowAsMonochrome property to false.<LineBreak></LineBreak>
                </TextBlock>
                    <BitmapIcon x:Name="SlicesIcon" UriSource="ms-appx:///Assets/slices.png" Width="50" HorizontalAlignment="Left" ShowAsMonochrome="False"/>
                </StackPanel>
            </local:ControlExample.Example>
            <local:ControlExample.Options>
                <CheckBox x:Name="MonochromeButton" Content="Monochrome" IsChecked="{x:Bind SlicesIcon.ShowAsMonochrome, Mode=TwoWay}"/>
            </local:ControlExample.Options>
            <local:ControlExample.Xaml>
                <x:String>
                    &lt;BitmapIcon x:Name="SlicesIcon" UriSource="ms-appx:///Assets/slices.png" Width="50" ShowAsMonochrome="$(ShowAsMonochrome)"/&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.Substitutions>
                <local:ControlExampleSubstitution Key="ShowAsMonochrome" Value="{ x:Bind MonochromeButton.IsChecked.Value, Mode=OneWay}"/>
            </local:ControlExample.Substitutions>
        </local:ControlExample>
        <local:ControlExample x:Name="Example3" HeaderText="A FontIcon using a glyph from a specific font family in a button" XamlSource="Icons/FontIconSample1_xaml.txt">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock TextWrapping="WrapWholeWords">Use FontIcon as the icon for a control if you want to specify a Glyph value from a FontFamily. Windows 10 uses the Segoe MDL2 Assets FontFamily.<LineBreak></LineBreak></TextBlock>
                    <Button x:Name="ExampleButton1">
                    <StackPanel>
                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&#xE790;"/>
                        <TextBlock Text="Select a color"/>
                    </StackPanel>
                </Button>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample x:Name="Example4" HeaderText="A ImageIcon using a bitmap image in a button" XamlSource="Icons/ImageIconSample1_xaml.txt">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock TextWrapping="WrapWholeWords">To use an ImageIcon as the icon for a control, you can set image that has a file format supported by the Image class. The two examples here show a PNG and SVG image as the icon.<LineBreak></LineBreak></TextBlock>
                    <Button x:Name="ImageExample1" Width="100">
                    <StackPanel Orientation="Vertical">
                        <muxc:ImageIcon Source="/Assets/strawberry.png"/>
                        <TextBlock Text="Click Here" TextAlignment="Center"/>
                    </StackPanel>
                </Button>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample x:Name="Example5" HeaderText="A ImageIcon using a SVG image in a button" XamlSource="Icons/ImageIconSample2_xaml.txt">
            <local:ControlExample.Example>
                <Button x:Name="ImageExample2">
                    <StackPanel Orientation="Vertical">
                        <muxc:ImageIcon Source="https://raw.githubusercontent.com/DiemenDesign/LibreICONS/master/svg-color/libre-camera-panorama.svg" Width="50"/>
                        <TextBlock Text="Click Here"/>
                    </StackPanel>
                </Button>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample x:Name="Example6" HeaderText="A PathIcon in a button" XamlSource="Icons/PathIconSample1_xaml.txt">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock TextWrapping="WrapWholeWords">
                       To use a PathIcon as the icon for a control, you specify the path data of the image you are trying to display.The path data draws a series of connected lines and curves.<LineBreak></LineBreak>
                    </TextBlock>
                <Button x:Name="Example1Button">
                    <StackPanel Orientation="Vertical">
                        <PathIcon Data="F1 M 16,12 20,2L 20,16 1,16" HorizontalAlignment="Center"/>
                        <TextBlock Text="Click Here"/>
                    </StackPanel>
                </Button>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample x:Name="Example7" HeaderText="A SymbolIcon in a button" XamlSource="Icons/SymbolIconSample_1_xaml.txt">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock TextWrapping="WrapWholeWords">
                       To use a SymbolIcon as the icon for a control, you specify the enum value for the glyph you would like to display. SymbolIcon's enum is based off of icons from the Segoe MDL2 font used by Windows 10. <LineBreak></LineBreak>
                    </TextBlock> 
                <Button x:Name="AcceptButton">
                    <StackPanel>
                        <SymbolIcon Symbol="Accept"/>
                        <TextBlock Text="Accept"/>
                    </StackPanel>
                </Button>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
    </StackPanel>
</Page>
